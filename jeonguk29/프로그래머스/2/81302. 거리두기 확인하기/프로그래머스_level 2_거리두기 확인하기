from collections import deque

# 상하좌우 이동 정의
dx = (-1, 1, 0, 0)
dy = (0, 0, -1, 1)

def bfs(place, start_x, start_y):
    n, m = 5, 5  # 문제에서 고정 크기 5×5
    visited = [[False] * m for _ in range(n)]

    q = deque()
    q.append((start_x, start_y, 0))  # (행, 열, 거리)
    visited[start_x][start_y] = True

    while q:
        x, y, dist = q.popleft()

        # 거리 2 초과면 더 이상 확인 불필요
        if dist > 2:
            continue

        # 자기 자신이 아닌 위치에서 'P' 발견 → 거리두기 위반
        if dist != 0 and place[x][y] == 'P':
            return False

        # 4방향 탐색
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            # 범위 체크
            if 0 <= nx < n and 0 <= ny < m:
                # 아직 방문 안 했고, 파티션(X)도 아닌 경우만 이동
                if not visited[nx][ny] and place[nx][ny] != 'X':
                    visited[nx][ny] = True
                    q.append((nx, ny, dist + 1))

    return True  # 위반 없음


def check(place):
    for x in range(5):
        for y in range(5):
            if place[x][y] == 'P':  # 사람 발견 시 BFS 검사
                if not bfs(place, x, y):
                    return False
    return True


def solution(places):
    result = []
    for place in places:
        if check(place):
            result.append(1)
        else:
            result.append(0)
    return result
